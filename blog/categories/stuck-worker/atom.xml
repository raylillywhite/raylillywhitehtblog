<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: stuck worker | My Octopress Blog]]></title>
  <link href="http://raylillywhite.github.com/raylillywhitehtblog/blog/categories/stuck-worker/atom.xml" rel="self"/>
  <link href="http://raylillywhite.github.com/raylillywhitehtblog/"/>
  <updated>2013-02-19T16:31:47-08:00</updated>
  <id>http://raylillywhite.github.com/raylillywhitehtblog/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Killing Stale or Stuck Resque Jobs]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/killing-stale-or-stuck-resque-jobs/index.html"/>
    <updated>2012-08-17T00:00:00-07:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/killing-stale-or-stuck-resque-jobs/killing-stale-or-stuck-resque-jobs</id>
    <content type="html"><![CDATA[<p>We use Resque (<a href="https://github.com/defunkt/resque)">https://github.com/defunkt/resque)</a> for processing our background jobs in Rails. We initially implemented Resque to send a few emails, but have since expanded our use greatly.</p>


<p>As we've begun relying more on Resque for all aspects of our app, we will occasionally experience long running jobs that get stuck. We know the job has finished  (an email was sent or a file was generated), but the job holds on to the worker and clogs our queue. Here is our method for killing the stuck jobs and getting our queue going again.</p>


<p><!--more--></p>


<p>Log into the machine that has the stuck worker and retrieve a list of the currently running Resque processes.</p>


<p><script src="https://gist.github.com/5d10d4e558484d9a7be6.js?file=procs.sh"></script></p>


<p>What we want to do is send the <strong>SIGUSR1</strong> signal to the parent process. This will tell the process to immediately kill the child process and continue working other jobs. You can get a list of which signals the processes respond to and what they do at <a href="https://github.com/defunkt/resque/#signals">https://github.com/defunkt/resque/#signals</a>.</p>


<p>To figure out which process is the parent process look for the one that says "Forked N at T" where N is the process number of the child that is currently proccessing the stuck job.</p>


<p>Not sure which number is <strong>SIGUSR1</strong>? Use `<strong>kill -l</strong>`.</p>


<p><script src="https://gist.github.com/aecb898f3dac1d8f0423.js"></script></p>


<p>So we see that <strong>30</strong> is <strong>SIGUSR1</strong>. Finally, send that to the parent process.</p>


<p><script src="https://gist.github.com/d67829bf4e9329c5006d.js"></script></p>


<p>This will kill the child process immediately and allow the worker to get back to work.</p>


<p>All of this information is in the Resque README, but it still took me some time to figure it out. So I thought I would just write a quick post on how we're handling this.</p>


<p>If you've seen similar issues with stuck long running jobs and have been able to prevent them, please let us know.</p>

]]></content>
  </entry>
  
</feed>
