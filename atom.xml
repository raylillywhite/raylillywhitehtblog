<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://raylillywhite.github.com/raylillywhitehtblog/atom.xml" rel="self"/>
  <link href="http://raylillywhite.github.com/raylillywhitehtblog/"/>
  <updated>2013-02-19T16:31:47-08:00</updated>
  <id>http://raylillywhite.github.com/raylillywhitehtblog/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Nitty Gritty of iOS Internationalization and Localization]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/blog/2013/02/18/the-nitty-gritty-of-ios-internationalization-and-localization/"/>
    <updated>2013-02-18T22:30:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/blog/2013/02/18/the-nitty-gritty-of-ios-internationalization-and-localization</id>
    <content type="html"><![CDATA[<p>The best way to prevent hating your job when your company grows is to use the Apple provided localization tools from day one, even if you have no plans to localize your app. Maybe it&#8217;s not the best way, but it&#8217;s certainly required. From day one you should be using:</p>

<ul>
<li><code>NSNumberFormatter</code></li>
<li><code>NSDateFormatter</code></li>
<li><code>NSLocalizedString</code></li>
<li><code>[[NSLocale currentLocale] objectForKey:NSLocaleUsesMetricSystem]</code></li>
</ul>


<p>From day one, you should not be:</p>

<ul>
<li>Pluralizing by adding an &#8216;s&#8217; (Safe yourself some trouble and use separate localized strings for plural and singular nouns)</li>
<li>Using magic numbers to set static sizes for views (specifically views with text)</li>
<li>Using &#8216;$&#8217; or other currency symbols in string formats</li>
</ul>


<p>Let&#8217;s start with the easier ones.</p>

<h2>NSNumberFormatter</h2>

<p>NSNumberFormatter&#8217;s most important use in localization for us was with displaying currencies. Users will have a different expectation of how a given currency is displayed depending on what country they are from. A price in US Dollars could be shown as <code>$50.00</code>, <code>US$50.00</code>, <code>50,00 $US</code>, etc.</p>

<p>NSNumberFormatter&#8217;s <code>NSNumberFormatterCurrencyStyle</code> allows you to let Apple decide which one to show the user, which gives them a consistent experience across all of their apps. Showing the full currency code (USD) would also work, and may be useful for certain detailed views like a verbose receipt, but we chose to stick with the more minimal format that NSNumberFormatter provides.
Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumberFormatter</span> <span class="o">*</span><span class="n">currencyFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSNumberFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">setNumberStyle:</span><span class="n">NSNumberFormatterCurrencyStyle</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">setCurrencyCode:</span><span class="n">currencyCode</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">setMaximumFractionDigits:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">setRoundingMode:</span><span class="n">NSNumberFormatterRoundHalfUp</span><span class="p">];</span>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">stringFromNumber:</span><span class="err">@</span><span class="p">(</span><span class="n">amount</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even if you aren&#8217;t displaying prices, make sure to use NSNumberFormatter to ensure that large numbers and decimals are displayed to the user correctly. <code>,</code> and <code>.</code> are switched in other locales.</p>

<h3>Caching and Thread Safety</h3>

<p>NSNumberFormatters and NSDateFormatters are slow to initialize and configure, so you generally want to cache any formatters that you can use in multiple places. Unfortunately they aren&#8217;t thread-safe though, so we keep separate formatters per thread:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="nf">HTCurrencyString</span><span class="p">(</span><span class="kt">double</span> <span class="n">amount</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">currencyCode</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">currencyFormatterKey</span> <span class="o">=</span> <span class="s">@&quot;HTCurrencyFormatter&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSNumberFormatter</span> <span class="o">*</span><span class="n">currencyFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="n">threadDictionary</span><span class="p">][</span><span class="n">currencyFormatterKey</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">currencyFormatter</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">currencyFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSNumberFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">setNumberStyle:</span><span class="n">NSNumberFormatterCurrencyStyle</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">setLocale:</span><span class="p">[</span><span class="n">NSLocale</span> <span class="n">currentLocale</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="n">threadDictionary</span><span class="p">][</span><span class="n">currencyFormatterKey</span><span class="p">]</span> <span class="o">=</span> <span class="n">currencyFormatter</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">setCurrencyCode:</span><span class="n">currencyCode</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">setMaximumFractionDigits:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">setRoundingMode:</span><span class="n">NSNumberFormatterRoundHalfUp</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">currencyFormatter</span> <span class="nl">stringFromNumber:</span><span class="err">@</span><span class="p">(</span><span class="n">amount</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>NSDateFormatter</h2>

<p>Using date formatters involves a couple of additional tricks, beyond the caching necessary for both date and number formatters. There are many built-in date formatter styles that we made use of with cached formatters like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDateFormatter</span> <span class="o">*</span><span class="nf">HTMediumDateFormatter</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">mediumDateFormatterKey</span> <span class="o">=</span> <span class="s">@&quot;HTMediumDateFormatter&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">dateFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="n">threadDictionary</span><span class="p">][</span><span class="n">mediumDateFormatterKey</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dateFormatter</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">dateFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">dateFormatter</span> <span class="nl">setDateStyle:</span><span class="n">NSDateFormatterMediumStyle</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="n">threadDictionary</span><span class="p">][</span><span class="n">mediumDateFormatterKey</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatter</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dateFormatter</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But there were also cases that weren&#8217;t really covered by the built-in styles, such as the date format that we prefer on our checkout screen, &#8220;Mon, Jan 28&#8221;. We previously were showing that by setting the date format with the string &#8220;EEE, MMM d&#8221;. This format doesn&#8217;t make sense for other countries though. We thought we would have to revert to using one of the built-in styles, but we found a very helpful method that Apple added in iOS 4.0: <code>+[NSDateFormatter dateFormatFromTemplate:options:locale:]</code>. That method will take the components of a date that you want, such as an abbreviated weekday, an abbreviated month and a day, and create a format string that suites the given locale.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="p">[</span><span class="n">_dateFormatter</span> <span class="nl">setDateFormat:</span><span class="p">[</span><span class="n">NSDateFormatter</span> <span class="nl">dateFormatFromTemplate:</span><span class="s">@&quot;EEEMMMd&quot;</span>
</span><span class='line'>                                                                  <span class="nl">options:</span><span class="mi">0</span>
</span><span class='line'>                                                                   <span class="nl">locale:</span><span class="p">[</span><span class="n">NSLocale</span> <span class="n">currentLocale</span><span class="p">]]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending on the user&#8217;s locale, that date formatter will give you strings like the following:</p>

<ul>
<li>US: <code>Mon, Jan 28</code></li>
<li>UK: <code>Mon 28 Jan</code></li>
<li>FR: <code>lun. 28 janv.</code></li>
</ul>


<p>Way easier and more reliable than trying to manipulate the built-in formats into the one that you&#8217;re looking for ;)  If you go through your app and replace your hardcoded date formats using this method, be careful not to don&#8217;t replace any date formats that you&#8217;re using for parsing.</p>

<h3>Date Formatter Gotcha</h3>

<p>When using a date formatter to parse dates from an API, make sure to set the locale to <code>@"en_US_POSIX"</code> for consistent behavior across devices/users.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDateFormatter</span> <span class="o">*</span><span class="nf">HTRFC822DateFormatter</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">rfc822DateFormatterKey</span> <span class="o">=</span> <span class="s">@&quot;HTRFC822DateFormatter&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">dateFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="n">threadDictionary</span><span class="p">][</span><span class="n">rfc822DateFormatterKey</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dateFormatter</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">dateFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">dateFormatter</span> <span class="nl">setLocale:</span><span class="p">[[</span><span class="n">NSLocale</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithLocaleIdentifier:</span><span class="s">@&quot;en_US_POSIX&quot;</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">dateFormatter</span><span class="p">.</span><span class="n">dateFormat</span> <span class="o">=</span> <span class="s">@&quot;EEE, dd MMM yyyy HH:mm:ss ZZZ&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="n">threadDictionary</span><span class="p">][</span><span class="n">rfc822DateFormatterKey</span><span class="p">]</span> <span class="o">=</span> <span class="n">dateFormatter</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">dateFormatter</span><span class="p">.</span><span class="n">timeZone</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimeZone</span> <span class="n">systemTimeZone</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dateFormatter</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://developer.apple.com/library/ios/#qa/qa1480/_index.html">More information on this from Apple</a></p>

<h2>NSLocalizedString</h2>

<p>The most important part of localization: user facing strings. Apple provides NSLocalizedString to wrap any string or format that you&#8217;ll be displaying to the user. <a href="http://twitter.com/mattt">@Mattt</a> has a <a href="http://nshipster.com/nslocalizedstring/">great article about NSLocalizedString on NSHipster</a>, so instead of going into detail about it here, I&#8217;m just going to describe some things that we did differently, so that you can decide if you&#8217;d want to do something similar.</p>

<p>As Mattt pointed out, the most common NSLocalizedString method is <code>NSString *NSLocalizedString(NSString *key, NSString *comment)</code>.  The basic behavior of that is to lookup the key in a <code>.strings</code> file that matches the preferred language of the user. We chose to use <code>NSLocalizedStringWithDefaultValue</code> though, because <code>NSLocalizedString(key, comment)</code> leaves you two straight-forward options:</p>

<ol>
<li><p>Use an English strings file (<code>en.lproj/Localizable.strings</code>) to map your keys to english strings. This means that your code no longer shows your english strings in context. That will increase the amount of jumping between files that you need to do, and can cause confusion if the keys look like English strings, but are out of sync with the strings file.</p></li>
<li><p>Keep your English strings in code as the keys. In this case, keep your english strings file empty, and after you run genstrings to create your English strings file for your translators, discard it. We keep an empty english strings file in our repository with a comment in it that lets developers know that it&#8217;s intentionally empty, but I&#8217;m not sure if having an empty English strings file behaves any differently than just not having an English one. The downside to this approach is that modifying your English strings (which are your keys) will cause your strings in other languages not to line up anymore. In cases where the meaning of the string changed, that makes sense. But in cases where you&#8217;re fixing typos or rewording things that wouldn&#8217;t require re-translation, you could be causing extra work for your translators.</p></li>
</ol>


<p>I&#8217;d definitely recommend the second option, leaving the English strings file blank, because it&#8217;ll make development less painful. In the past, I&#8217;ve used the first option and it was no fun to regularly switch back and forth between code and the strings file, or to search for a user-facing string by looking up the key in the strings file. The reason we chose to use the more complicated <code>NSLocalizedStringWithDefaultValue</code> is to prevent changes to English strings breaking the keys for the strings files as would normally happen by using the empty English strings file approach.</p>

<p>We created a macro (with a much shorter name) to minimize our pain with using NSLocalizedStringWithDefaultValue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define HTStr(key, value, comment) NSLocalizedStringWithDefaultValue(key, nil, [NSBundle mainBundle], value, comment)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">emailField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">HTStr</span><span class="p">(</span><span class="s">@&quot;S_Email&quot;</span><span class="p">,</span> <span class="s">@&quot;Email&quot;</span><span class="p">,</span> <span class="s">@&quot;Placeholder for login email field&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this we have the option of changing just the English string, to prevent retranslation and breaking links to existing translations. Or, we can change the key and the value to trigger a retranslation if the meaning of the English string has changed at all. There are a couple downsides to this approach though. Using our macro caused genstrings to not find our strings, so we had to hack together a <a href="https://gist.github.com/raylillywhite/4984291">script for generating our strings file</a>. And you could accidentally use the same key for two different values. Fortunately, this is caught by genstrings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Key</span> <span class="s">&quot;S_Email&quot;</span> <span class="n">used</span> <span class="n">with</span> <span class="n">multiple</span> <span class="n">values</span><span class="p">.</span> <span class="n">Value</span> <span class="s">&quot;Email&quot;</span> <span class="n">kept</span><span class="p">.</span> <span class="n">Value</span> <span class="s">&quot;E-mail&quot;</span> <span class="n">ignored</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In hindsight though, we probably would have been fine with using the simple <code>NSLocalizedString(key, comment)</code>. Smartling makes it pretty easy for us to get our strings files updated by the translators, so if keys were to change anytime we change the English text, that wouldn&#8217;t be a big problem. And you could always selectively use <code>NSLocalizedStringWithDefaultValue</code> in that case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's stop making our users type @gmail.com]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/lets-stop-making-our-users-type-gmailcom/index.html"/>
    <updated>2013-01-25T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/lets-stop-making-our-users-type-gmailcom/lets-stop-making-our-users-type-gmailcom</id>
    <content type="html"><![CDATA[<p>At HotelTonight, we want our hotel deals to be as accessible as possible to our customers, which means reducing time spent doing tedious things such as signing up and logging in. &nbsp;Accordingly, it occurred to us recently that we could save many of our customer a few seconds if we autocomplete their email domain while they&#8217;re typing. At the time of this writing, over 75% of our customers&#8217; email addresses are from just&nbsp;<em>five</em>&nbsp;domains (gmail.com, yahoo.com, hotmail.com, aol.com, comcast.net). so we should be able to make a pretty accurate educated guess.</p>
<p>Autocompleting email addresses can be tricky to implement because it can easily become distracting and get in the user&#8217;s way. &nbsp;It&#8217;s something that should be completely optional and never overbearing. &nbsp;Therefore, we&#8217;ve come up with a solution that works as follows:</p>
<ol>
<li>Start suggesting an email domain once the user types @</li>
<li>Each time the user types a character after @, re-evaluate the suggestion (i.e. typing &#8220;@h&#8221; yields &#8220;@hotmail.com&#8221;, while &#8220;@hote&#8221; produces &#8220;@hoteltonight.com&#8221;).</li>
<li>Stop suggesting once the user types &#8220;.&#8221; &#8211; to allow subsets of domains to be used. &nbsp;For example, gmail.co instead of gmail.com. &nbsp;Plus, once the user has typed a period we figure they&#8217;re intent on finishing the whole thing, so we&#8217;d like to get out of their way.</li>
</ol>
<p>The first email address that appears after the user types @ is @gmail.com, which means that a full third of our users won&#8217;t have to finish the &#8220;gmail.com&#8221; part. &nbsp;For them, the days of fat fingering &#8220;@gmail.con&#8221; are over.</p>
<p>Our solution relies on&nbsp;<a href="https://github.com/hoteltonight/HTAutocompleteTextField">HTAutocompleteTextField</a>, which can be used to autocompletion any type of data in a text field (for example, a URL), as the logic is written by the developer.</p>
<p>We think this is pretty swell, and we&#8217;d love to see this used in every app, because, frankly, we as users are sick of typing &#8220;gmail.com&#8221; over and over again. &nbsp;Check out HTAutocompleteTextField on&nbsp;<a href="https://github.com/hoteltonight/HTAutocompleteTextField" title="Github">Github</a>&nbsp;and the accompanying example for the implementation details. &nbsp;Please let us know any feedback you might have in the Comments section.</p>
<p>Here&#8217;s a preview of how it works in the app, or you can see it live in Hotel Tonight on the <a href="http://www.hoteltonight.com/iphone">App Store</a>:</p>
<p>&nbsp;</p>
<p><img title="HTAutocompleteTextField in action" src="https://raw.github.com/hoteltonight/HTAutocompleteTextField/master/demo.gif" alt="HotelTonight" style="display: block; margin: 10px auto 30px auto;" /></p>
<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internationalization and localization - Rails]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/174411869/index.html"/>
    <updated>2013-01-21T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/174411869/174411869</id>
    <content type="html"><![CDATA[<p>This is part two of our eight part series of posts on our first foray into internationalization and localization.<strong style="font-family: Times; font-size: medium; font-weight: normal;"><br /></strong></p>
<ol>
<li>Planning, tools, and process</li>
<li>Rails</li>
<li>Android</li>
<li>iOS</li>
<li>Design/UX</li>
<li>QA</li>
<li>Marketing</li>
<li>Measuring impact</li>
</ol>
<p>All of our server side apps are currently written in Ruby and use the Rails 3 framework. So where did we start? The first thing we did was to identify the major parts of the system that we needed to ensure were internationalized. Here are the big ticket items that we focused on:<strong style="font-family: Times; font-size: medium; font-weight: normal;"><br /></strong></p>
<ul>
<li>API responses (that power our mobile apps)</li>
<li>Emails</li>
<li>Web content</li>
<li>Payment/currency support</li>
</ul>
<h2>Remember the golden rule</h2>
<p>When it comes to internationalization, the simplest and most important rule is to separate code and content. If you&rsquo;re using the Rails framework, the place to start is to read the<a href="http://guides.rubyonrails.org/i18n.html"> Rails Internationalization API guide</a>. Out of the box, you get a lot for free. Here are the basic things that we put in place:<strong style="font-family: Times; font-size: medium; font-weight: normal;"><br /></strong>&nbsp;<br />1) Drop in the<a href="https://github.com/svenfuchs/i18n"> i18n gem</a><p />2) Locale is set based on the Accept-Language header that is passed in from a client. We leveraged Iain Hecker&rsquo;s<a href="https://github.com/iain/http_accept_language"> http_accept_language</a> gem for this.<p /><span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;">if http_accept_language.header.present?<br /> &nbsp;&nbsp;I18n.locale = <br />&nbsp;&nbsp;&nbsp;&nbsp;http_accept_language.compatible_language_from(I18n.available_locales)<br />else<br />&nbsp;&nbsp;I18n.locale = :en<br />end</span><p />3) We centralized all localizable content for our API responses, emails, and web pages into .yml files. We chose to use multiple .yml files to make it easier to manage different types of content. E.g., legal vs. API responses. We created .yml files in <strong>config/locales</strong> with a key for each string and the string. For example:<strong style="font-family: Times; font-size: medium; font-weight: normal;"><br /></strong><br /><strong style="font-family: Times; font-size: medium; font-weight: normal;"><span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;">fr:</span><br /><span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;"> customer:</span><br /><span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;"> &nbsp;&nbsp;disabled_account: &#8220;Votre compte a &eacute;t&eacute; d&eacute;sactiv&eacute;&#8221;</span><br /></strong><br />when the view renders its content, it&rsquo;ll pull out the correct string based on the locale that&rsquo;s set based on the Accept-Language header passed in by the client.<strong style="font-family: Times; font-size: medium; font-weight: normal;"><br /></strong><br /><strong style="font-family: Times; font-size: medium; font-weight: normal;"><span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;">I18n.t &#8216;customer.disabled_account&#8217;</span><br /></strong><br />As mentioned in our previous post, once you have the strings centralized in .yml files, we strongly recommend dropping in &ldquo;pseudo translations&rdquo; to ensure that you&rsquo;ve got all of your strings properly internationalized and to clearly see what kind of layout issues you&rsquo;ve got.</p>
<p>[[posterous-content:ogxeEDcjheJEqjwAglhc]]4) For content in our database (e.g., the profile for each hotel), we ended up creating a custom solution. This isn&rsquo;t in shape to open source yet, but here&rsquo;s the general strategy:<strong style="font-family: Times; font-size: medium; font-weight: normal;"><br /></strong></p>
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li>Create a module that can be mixed into a given model that has translatable content (attribute)</li>
<li>Set up associations so that a given attribute for a given instance of a model can have translations. There is a locale associated with each translation.</li>
<li>Keep all translations in a single table</li>
<li>Create rake tasks to export/import content for localization and between different environments (i.e., staging vs. production). Include options to filter based on model and locale.</li>
<li>Create reusable elements that make it easy to manage translations in forms</li>
<li>Add a method similar to <span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;">I18n.t</span> to look up a translation for a given key (model, instance ID, and attribute name) and locale</li>
</ul>
<p>Note that our database (we use MySQL) was set up to use UTF-8 from the get-go. If you are not using UTF-8, you&rsquo;ll likely need to take on additional work to convert the data to UTF-8 so that you can store and sort content for multiple locales properly.<strong style="font-family: Times; font-size: medium; font-weight: normal;"><br /></strong><br /><span style="font-size: small; font-family: Arial; background-color: transparent; vertical-align: baseline;">5) Ensure that strings and API responses format dates, numbers, and currencies properly. Be sure that</span> <span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;">I18n.locale</span> is <span style="font-size: small;">set (or explicitly pass the locale as an option to the method) and leverage the following methods.</span><strong style="font-family: Times; font-size: medium; font-weight: normal;"><br /></strong></p>
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li>Date formatting - <span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;">I18n.l</span></li>
</ul>
<p>[[posterous-content:emwibxuFhrvvbeGGDmxB]]</p>
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li>Number formatting - <span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;">number_with_precision, number_to_percentage, number_with_delimiter</span></li>
<li>Currency formatting -&nbsp;<span style="font-size: 14px; font-family: Courier New; background-color: transparent; vertical-align: baseline;">number_to_currency</span> 
<ul>
<li>NOTE: We went custom on this for explicit control over which currency symbol to display and what precision to use.</li>
</ul>
</li>
</ul>
<p>6) When it comes to sorting, databases can handle sorting text for multiple locales properly, but Ruby struggles. We suggest checking out&nbsp;<a href="https://github.com/jchris/icu4r">ICU4R</a> and/or&nbsp;<a href="http://engineering.twitter.com/2012/08/twittercldr-improving.html">TwitterCLDR</a> for help with sorting in Ruby, as well as, to solve many of the problems above.</p>
<h2>Layout strategies</h2>
<p>Variable length and namely longer strings (e.g., German tends to be 25% longer than English) will most likely cause you at least some layout problems. We&rsquo;ll talk more about strategies for dealing with variable string lengths in our upcoming posts for design/UX, iOS, and Android, but here are a few tips.</p>
<ul>
<li>Allow wrapping. Use truncation and an ellipsis as a fallback. The number of characters to allow before truncating such that things are understandable isn&rsquo;t always consistent so bear that in mind.</li>
</ul>
<p>[[posterous-content:zoioCBmzCnDwtbgAHzpm]]</p>
<ul>
<li>Guide your translators on maximum string length particularly when you need it to be short. If you can provide screenshots for context that&rsquo;s also very helpful.</li>
</ul>
<p>[[posterous-content:DBrmphlvruyuEdGuJmwI]]</p>
<ul>
<li>Avoid text embedded in images. Every time these change or need localization it is more manual (i.e., modify text in a layer in a Photoshop file and then generate the updated image), time consuming, and therefore more costly to handle these. Don&rsquo;t do it.</li>
</ul>
<h2>Add some tests</h2>
<p>Add more test scenarios to sanity check that translations are rendering properly. Pick content that doesn&rsquo;t change frequently otherwise you&rsquo;ll be doing a lot of maintenance on these checks. Don&rsquo;t go too crazy particularly when you are leveraging things like the Rails i18n API which are already tested. Just do enough to give yourself confidence that things are working properly and that no one made a mistake like checking in a .yml file for the wrong locale under the wrong name.<strong style="font-family: Times; font-size: medium; font-weight: normal;"><br /> </strong></p>
<h2>Payment/currency support</h2>
<p>We&rsquo;ve got a custom abstraction layer for managing payments and currency so we&rsquo;re going to go a little light on the guidance here. At a minimum you need to ensure that you&rsquo;re working with a payment gateway that supports multiple currencies (we use<a href="https://www.braintreepayments.com/"> Braintree</a>) and that a particular form of payment supports a given currency. For example, we weren&rsquo;t able to set up AMEX support with Mexican Pesos.</p>
<h2>Other miscellaneous things to factor in</h2>
<p><strong>SMS and Twitter text</strong> - Keep the English as short as possible as staying under 140 (Twitter) or 160 (SMS) characters isn&rsquo;t always easy after it&rsquo;s been translated</p>
<p><strong>Customer support phone numbers</strong> - You may need different phone numbers in different countries to eliminate or minimize costs for customers. This was more painful for us than it sounds. For example, we were able to secure International Freephone Number (ITFN) numbers that worked for a subset of European countries, but not all. We then had to secure local toll-free numbers for specific countries that didn&rsquo;t support ITFN and adjust customer support phone number handling and display in our apps, APIs, and web pages.</p>
<p><strong>Address formats</strong> - Some countries have states/provinces and some do not</p>
<ul>
</ul>
<h2>Key things to remember</h2>
<p>Here are our top two pieces of advice.</p>
<p>1) <strong>Keep your minimum size string to a sentence</strong> - Often times people are tempted to concatenate sub-strings together to get more reuse.<a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself"> DRY</a> is heavily emphasized in Rails, but this is one time where it can cause you problems. A couple simple examples of this are that in different languages words have gender and things may be phrased differently based on quantity.</p>
<ul>
</ul>
<p style="padding-left: 30px;"><span style="text-decoration: underline;"><strong>GOOD FOR LOCALIZATION</strong></span></p>
<p style="padding-left: 30px;">base: &#8220;A city tax of %{tax_amount} will be collected by the hotel at check-in.&#8221;</p>
<p style="padding-left: 30px;">per_person: &#8220;A city tax of %{tax_amount} <strong>per person</strong> will be collected by the hotel at check-in.&#8221;</p>
<p style="padding-left: 30px;">per_night: &#8220;A city tax of %{tax_amount} <strong>per night</strong> will be collected by the hotel at check-in.&#8221;</p>
<p style="padding-left: 30px;">per_person_per_night: &#8220;A city tax of %{tax_amount} <strong>per person per night</strong> will be collected by the hotel at check-in.&#8221;</p>
<p style="padding-left: 30px;"><span style="text-decoration: underline;"><strong>MAY CAUSE YOU PROBLEMS IF YOU TRY TO CONCATENATE</strong></span></p>
<p style="padding-left: 30px;">base: &#8220;A city tax of %{tax_amount}&#8221;</p>
<p style="padding-left: 30px;">per_person: &#8220;per person&#8221;</p>
<p style="padding-left: 30px;">per_night: &#8220;per night&#8221;</p>
<p style="padding-left: 30px;">collected_at_checking: &#8220;will be collected by the hotel at check-in.&#8221;</p>
<p>With legal strings (e.g., privacy policy and terms of service) we went with the largest contiguous chunks of content (typically paragraph) that we could get away with.</p>
<p>2) <strong>Keep layout in your views versus your strings</strong> - This is less true for web views given the way that browsers handle whitespace, but we certainly had cases where emails and the mobile apps relied on spaces in strings for formatting. When you localize the length of your strings will vary and relying on spaces in specific positions is very brittle. It sounds simple, but our reality was that the aesthetic issues due to spaces made up approximately 10% of the issues logged by QA.</p>
<ul>
</ul>
<p>[[posterous-content:FEGrClsdHsApazDiszjl]]</p>
<ul>
</ul>
<h2>More helpful resources</h2>
<ul>
<li><a href="https://github.com/onomojo/i18n-country-translations">i18n-country-translations</a> gem</li>
<li><a href="http://ruby-i18n.org/wiki">Ruby i18n wiki</a></li>
</ul>
<p>As always please let us know if you have more specific questions that we can try to help with. Up next, we&rsquo;ll offer up some specifics about what we had to do for out native Android and iOS apps.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internationalization and localization - Planning, tools, and process]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/internationalization-and-localization-plannin/index.html"/>
    <updated>2012-12-12T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/internationalization-and-localization-plannin/internationalization-and-localization-plannin</id>
    <content type="html"><![CDATA[<p><strong style="font-family: Times; font-size: medium; font-weight: normal;"><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">Companywide, we are very excited to have recently released support for French, German, Italian, and Spanish in the HotelTonight apps to better serve more people in more places! When it comes to supporting multiple locales, we are really just getting started in many respects. Despite this, we thought we would share some of our experiences from the past 3 months in order to help others better understand what&rsquo;s involved once you decide that you&rsquo;re ready to bring your mobile apps to an international audience.</span><p /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">This will be a eight part series of posts that discuss:</span><br /><ol style="margin-top: 0pt; margin-bottom: 0pt;">
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Planning, tools, and process</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Rails</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Android</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">iOS</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Design/UX</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">QA</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Marketing</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Measuring impact</span></li>
</ol><br /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">With all of that out of the way, let&rsquo;s dive in and talk planning, tools, and process.</span><br />
<h2><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline;">Planning</span></h2>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">So you want to expand to an international audience, where to start? We&rsquo;re going to limit the scope of what we talk about to be very app-centric. In other words &ldquo;What do you need to worry about that is directly tied to your mobile apps?&rdquo;</span><p /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">When we started on this journey, there wasn&rsquo;t much done.</span><br />
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Neither the apps nor APIs were internationalized</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">We used Unicode (UTF-8 and UTF-16) in all of our apps all the way through so there was no need to add support for nor convert data between character encodings</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">The mobile app screen layouts were not necessarily designed with localized content (longer strings, etc.) in mind</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">As a company, HT had zero translation experience</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">We had implemented support for multiple currencies as we&rsquo;d already expanded into Canada, the UK, and the Netherlands</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">We had limited customer support staff with the language skills to support the new locales</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">We had no full-time QA staff</span></li>
</ul>
<br /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">So how&rsquo;d we go about figuring out what to do?</span><br />
<h3><span style="font-size: 16px; font-family: Arial; color: #666666; background-color: transparent; vertical-align: baseline;">Identify tools to help</span></h3>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">Internationalization and localization is a solved problem at least to a degree. We absolutely did not want to re-invent the wheel and primarily focused on finding a hosted </span><a href="http://en.wikipedia.org/wiki/Globalization_management_system"><span style="font-size: 15px; font-family: Arial; color: #1155cc; background-color: transparent; vertical-align: baseline;">translation management system</span></a><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"> (TMS) that we could use to localize content. Some key features that we looked for:</span><br />
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Hosted, affordable solution</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">A tool that would allow either HT staff or vendors to carry out localization work</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">APIs to get content in/out of the system (enables automation)</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Translation memory (including the ability to import/export in TMX format)</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Glossary (including the ability to import/export the data in a format such as CSV)</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Support for Ruby YAML, Android XML, and iOS Strings formats</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Read-only placeholders for inline markup and/or variables</span></li>
</ul>
<br /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">We ended up choosing </span><a href="http://www.smartling.com/"><span style="font-size: 15px; font-family: Arial; color: #1155cc; background-color: transparent; vertical-align: baseline;">Smartling</span></a><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"> as the TMS that best fit for our needs. Besides satisfying our core needs they offered some nice features to help support better translation quality like the ability to associate screenshots with strings to give translators better context to translate with.</span><br />
<h3><span style="font-size: 16px; font-family: Arial; color: #666666; background-color: transparent; vertical-align: baseline;">Roughly estimate technical scope</span></h3>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">1) Internationalization</span><br />
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">We estimated and made changes to externalize strings in both the APIs and mobile apps</span></li>
</ul>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">2) Mobile app screen layout</span><br />
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Once the API and mobile app strings were externalized we generated &ldquo;pseudo&rdquo; translations via Smartling (albeit there are any number of ways to do this). The &ldquo;pseudo&rdquo; translations are fake translations with longer string lengths and preferably a mix of non-ASCII characters. We dropped these in the apps and APIs and filed tickets/stories to address obvious layout issues.</span></li>
</ul>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">3) Web content and emails</span><br />
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">We estimated and made changes to externalize strings in web pages and email</span></li>
</ul>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">4) Internal tools</span><br />
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">We decided to create an internal tool that allowed us to associate strings and screenshots and then publish those to Smartling. This is something that we&rsquo;ve thought about open sourcing so if you&rsquo;re interested please get in touch with us.</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">For certain types of content such as hotel profiles, a large chunk of the the content isn&rsquo;t reusable. For this situation we opted to extend our admin UI to allow direct translation of this content rather than send it through a TMS.</span></li>
</ul>
<h3><span style="font-size: 16px; font-family: Arial; color: #666666; background-color: transparent; vertical-align: baseline;">Roughly estimate localization scope</span></h3>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">Once the strings were externalized, we were able to generate word counts via the TMS. A number that is often used for rough estimates is to assume that a professional translator can translate on the order of 2,000 words/day.</span><p /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">We used the word counts to project costs and a schedule. We staggered the schedule such that strings in the mobile apps and APIs were translated first so that we could begin testing as early as possible.</span><br />
<h3><span style="font-size: 16px; font-family: Arial; color: #666666; background-color: transparent; vertical-align: baseline;">Start hiring help</span></h3>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">We immediately began searching for localization help, multilingual customer support team members, and multilingual QA engineers. We were able to fill these roles in a 1-2 month period.</span><br />
<h2><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline;">Process</span></h2>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">Since this was our first round of support for new locales, we intentionally kept things fairly manual out of the gate. Here&rsquo;s the basic workflow we follow for each round of localization that we complete:</span><br />
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">From a designated branch in source control for each app, upload the externalized strings to the TMS</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Translate</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Review</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Download the externalized strings from the TMS</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">On a separate source control branch, create a </span><a href="https://help.github.com/articles/using-pull-requests"><span style="color: #1155cc; background-color: transparent; vertical-align: baseline;">pull request</span></a><span style="background-color: transparent; vertical-align: baseline;"> (we use github) for the Android, iOS, and Rails teams to review and merge in localized string updates</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Generate builds (automatically via continuous integration or manually in some cases) once the pull requests are merged in</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Test (at different points this ranges from the product team to the entire company)</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">File bugs as needed</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Rinse, repeat</span></li>
</ul>
<br /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">We plan more automation around this process to make it more continuous in the future, but wanted to make sure we had something basic that worked as a starting point.</span><p /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">When we need to adjust translations we search for and update them directly in the TMS. The updated translations are typically then pulled into the apps with the next round of localization.</span><br />
<h2><span style="font-size: 19px; font-family: Arial; background-color: transparent; vertical-align: baseline;">Roles</span></h2>
<span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">Many of the roles here such as designer, engineer, QA engineer, or translator are fairly obvious. One that may not be obvious is the </span><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: bold; vertical-align: baseline;">localization project manager</span><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">. This person is responsible for:</span><br />
<ul style="margin-top: 0pt; margin-bottom: 0pt;">
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Creating and maintaining the style guide and glossary</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Managing the translators including answering any questions such as clarifying the context for a specific string</span></li>
<li style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;"><span style="background-color: transparent; vertical-align: baseline;">Training translators on how to use various tools</span></li>
</ul>
<br /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">For us there were additional responsibilities such as soliciting feedback from multilingual team members throughout the company. This is a full-time job! If you are working with a localization service provider you will likely pay for someone to take on at least a chunk of these duties, but if you are doing things in-house be aware that this isn&rsquo;t a side job.</span><p /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">This concludes what we&rsquo;ve got for you around planning, tools, and process. If you have questions or would like more details please don&rsquo;t hesitate to get in touch with us by posting a comment. </span><p /><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline;">In upcoming posts in the series, we will delve into more specifics for Rails, Android, iOS, design/UX, QA, marketing, and analytics.</span></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[State-aware cached rasterization in iOS for epic performance]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/asynchronous-state-aware-component-rasterizat/index.html"/>
    <updated>2012-12-07T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/asynchronous-state-aware-component-rasterizat/asynchronous-state-aware-component-rasterizat</id>
    <content type="html"><![CDATA[<p>Creating custom programmatically-drawn components in iOS is a common problem in iOS design and development. &nbsp;However, the path toward optimization for these components becomes complicated very quickly - and there is a lot of conflicting advice out there. &nbsp;For the most part, people end up applying the CALayer shouldRasterize property as a cure-all for performance issues. &nbsp;However, CA rasterization is only as clever as it can be - it flushes the raster every time an instance is redrawn. &nbsp;Often times, bundled assets are used instead. I think there is a lot of value in building dynamic components rather than filling your app binary with bundled assets, so I decided to dig deeper and develop a more efficient pattern.</p>
<p>I was inspired by two recently published works: <a href="http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance" target="_blank">Reda Lemeden&#8217;s article Designing for iOS: Graphics and Performance</a>, and <a href="https://github.com/mindsnacks/MSCachedAsyncViewDrawing">Javier Soto&#8217;s MSCachedAsyncViewDrawing library</a>.</p>
<p>The main point of inspiration from Reda&#8217;s article was what he called a &#8216;hybrid approach&#8217; - essentially, using the iOS drawing stack to render image assets on the <em>component level</em>&nbsp;as static UIImages. &nbsp;At it&#8217;s core, this is very similar to rasterization, except that the generated image is drawn only once and stored in a shared location, instead of Core Animation storing a bitmap of <em>each rendered instance</em> of your component. &nbsp;This works great for components that are static in nature, but what about more complex components that having many properties affecting their appearance?</p>
<p>This question drove&nbsp;the development of a class called <a href="https://github.com/hoteltonight/HTStateAwareRasterImageView">HTStateAwareRasterImageView</a>, a rasterization system that caches rendered components based on their state, rendering new assets in response to key-value observation of developer-defined key paths affecting appearance. &nbsp;A component&#8217;s unique state, based on the values of it&#8217;s properties that affect appearance, is only ever drawn once in this system. Asynchronous rendering is an added bonus, thanks to MSCachedAsyncViewDrawing. The bundled demo project compares the same component in a table using no rasterization, Core Animation rasterization, and HTStateAwareRasterImageView, demonstrating a dramatic performance enhancement, especially on older devices (I&#8217;m testing using a 4th gen iPod). The usage looks like this, from the github readme:</p>
<p>Start by conforming to the HTRasterizableView protocol. A simple example is provided in the demo project (HTExampleRasterizableComponent). The single required method is:</p>
<div class="CodeRay">
  <div class="code"><pre>- (NSArray *)keyPathsThatAffectState;</pre></div>
</div>

<p>This is used for two purposes:&nbsp;</p>
<ul>
<li>To key-value observe the specified key paths to trigger image regeneration&nbsp;</li>
<li>To generate a hash of the component&#8217;s state</li>
</ul>
<p>Initialize a HTStateAwareRasterImageView and set the rasterizableView property to your HTRasterizableView, like this snippet from the demo project:</p>
<div class="CodeRay">
  <div class="code"><pre>_rasterizableComponent = [[HTExampleRasterizableComponent alloc] init];
_stateAwareRasterImageView = [[HTStateAwareRasterImageView alloc] init];
_stateAwareRasterImageView.rasterizableView = _rasterizableComponent;
_stateAwareRasterImageView.delegate = self;
[self addSubview:_stateAwareRasterImageView];</pre></div>
</div>

<p>If your component can take advantage of UIImage caps (fixed-size corners and stretchable center), these two methods are optional on the HTRasterizableView protocol:&nbsp;</p>
<div class="CodeRay">
  <div class="code"><pre>- (UIEdgeInsets)capEdgeInsets;
- (BOOL)useMinimumFrameForCaps;</pre></div>
</div>

<p>If you respond YES to userMinimumFrameForCaps, the component is rendered at it&#8217;s cumulative cap sizes plus 1pt horizontally and vertically, drastically reducing render time in many applications.</p>
<p>You can specify if you want drawing to occur synchronously on the main thread:</p>
<div class="CodeRay">
  <div class="code"><pre>@property (nonatomic, assign) BOOL drawsOnMainThread;</pre></div>
</div>

<p>You can also turn off keypath observing if you want to manually regenerate images (use this for pre-rendering assets):</p>
<div class="CodeRay">
  <div class="code"><pre>@property (nonatomic, assign) BOOL kvoEnabled; 
// For prerendering only
- (void)regenerateImage:(HTSARIVVoidBlock)complete;</pre></div>
</div>

<p>A delegate property is also available to let you know when it&#8217;s regenerating an image, and when it gets a new image back:</p>
<div class="CodeRay">
  <div class="code"><pre>@property (atomic, assign) id&lt;HTStateAwareRasterImageViewDelegate&gt; delegate;</pre></div>
</div>

<p>For debugging purposes, the cache&nbsp;key is available through this method.</p>
<div class="CodeRay">
  <div class="code"><pre>- (NSString *)cacheKey;</pre></div>
</div>

<p>The demo project has four tabs:</p>
<ul>
<li>A tableview taking advantage of HTStateAwareRasterImageView</li>
<li>A tableview that displays cache key, actual size and cell-height sized cached images</li>
<li>A tableview that uses the same component without rasterization</li>
<li>A tableview that uses the same component with Core Animation rasterization enabled</li>
</ul>
<p>[[posterous-content:kalFFJyEvoqgGhuifDna]][[posterous-content:rbkatumnjpxwdsCvplev]]</p>
<ul>
</ul>
<p>&nbsp;</p>
<p>The cache key used to define the state of your component is generated by the NSObject+HTPropertyHash category. It is important that the hash method produces a string that is unique to the state of your properties, but not TOO unique by including things like pointer values. The exception for CGColorRef in that category is made because we only want the RGBA values described, not the pointer value&nbsp;plus the RGBA values. &nbsp;Other exceptions may be required, depending on the application.</p>
<p>A limitation of this approach (and all approaches that render CALayers to image contexts) is that CALayer renderInContext, used for drawing the layer to a graphics context, does not support the CALayer mask property, as well as some other exceptions. &nbsp;The category included in the project, UIView+HTDrawInContext, provides a workaround for CALayer masks, but <em>only for the root layer of the rasterized component.</em>&nbsp;From the CALayer doc,</p>
<p>&#8220;&#8230;&nbsp;this method does not support the entire Core Animation composition model.&nbsp;<code>QCCompositionLayer</code>,&nbsp;<code>CAOpenGLLayer</code>, and&nbsp;<code>QTMovieLayer</code>&nbsp;layers are not rendered. Additionally, layers that use 3D transforms are not rendered, nor are layers that specify&nbsp;<code><a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html#//apple_ref/occ/instp/CALayer/backgroundFilters">backgroundFilters</a></code>,&nbsp;<code><a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html#//apple_ref/occ/instp/CALayer/filters">filters</a></code>,<code><a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html#//apple_ref/occ/instp/CALayer/compositingFilter">compositingFilter</a></code>, or a&nbsp;<code><a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html#//apple_ref/occ/instp/CALayer/mask">mask</a></code>&nbsp;values. Future versions of OS X may add support for rendering these layers and properties.&#8221;</p>
<p>If you decide to give <a href="https://github.com/hoteltonight/HTStateAwareRasterImageView">HTStateAwareRasterImageView</a> a try, pull requests and feedback are very welcome (submit an issue on github). Good luck!</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling multiple delegates in iOS]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/handling-multiple-delegates-in-ios/index.html"/>
    <updated>2012-10-24T00:00:00-07:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/handling-multiple-delegates-in-ios/handling-multiple-delegates-in-ios</id>
    <content type="html"><![CDATA[<p>Sometimes, the delegate pattern in iOS just doesn&#8217;t fit with a class heirarchy or design, specifically when you find yourself wanting to assign multiple delegates to a single source. For these cases, the approach usually taken is to use the notification center. This is an approach I have used in the past, but it always felt like a cop-out. Instead, I decided to build a delegate proxy using an NSProxy subclass. It takes a list of target delegates, and operates on two simple rules:</p>
<ol>
<li>Messages with a void return type are sent to all target delegates</li>
<li>Messages with non-void return types are send to the <em>first delegate in the list which responds to the selector.</em></li>
</ol>
<p>This pattern seems to be effective in identifying which messages are informative (hey, something happened) and which messages are more complex interactions (how should I do this?). It worked well for my use case (UIScrollViewDelegate), and I&#8217;m really curious to see how well it works for other applications. Comment if you find some use for it! &nbsp;Podspec included for CocoaPods users.</p>
<p><a href="https://github.com/hoteltonight/HTDelegateProxy" title="HTDelegateProxy on GitHub" target="_blank">The class HTDelegateProxy is available here on GitHub.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capturing global hotkeys in the iOS Simulator]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/capturing-global-hotkeys-in-the-ios-simulator/index.html"/>
    <updated>2012-10-08T00:00:00-07:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/capturing-global-hotkeys-in-the-ios-simulator/capturing-global-hotkeys-in-the-ios-simulator</id>
    <content type="html"><![CDATA[<p><strong>Why would you want to do that?</strong></p>
<p>When you&#8217;re using an iterative workflow, little shortcuts make a big difference. &nbsp;Having the ability to use custom hotkeys on the keyboard while the app runs in the simulator turns out to be very useful. &nbsp;Being able to navigate to specific screens with a hotkey can save a lot of time when you&#8217;re making small changes and restarting over and over. &nbsp;Our first application was triggering screenshot captures for a localization tool called Smartling. &nbsp;I think it will be useful in debugging edge cases where we need to trigger uncommon events in code. &nbsp;What would you use it for? &nbsp;Check out the code at:</p>
<p><a href="https://github.com/jacobjennings/JJPrivateKeyEvents">https://github.com/jacobjennings/JJPrivateKeyEvents</a>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Killing Stale or Stuck Resque Jobs]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/killing-stale-or-stuck-resque-jobs/index.html"/>
    <updated>2012-08-17T00:00:00-07:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/killing-stale-or-stuck-resque-jobs/killing-stale-or-stuck-resque-jobs</id>
    <content type="html"><![CDATA[<p>We use Resque (<a href="https://github.com/defunkt/resque)">https://github.com/defunkt/resque)</a> for processing our background jobs in Rails. We initially implemented Resque to send a few emails, but have since expanded our use greatly.</p>
<p>As we&#8217;ve begun relying more on Resque for all aspects of our app, we will occasionally experience long running jobs that get stuck. We know the job has finished  (an email was sent or a file was generated), but the job holds on to the worker and clogs our queue. Here is our method for killing the stuck jobs and getting our queue going again.</p>
<p><!--more--></p>
<p>Log into the machine that has the stuck worker and retrieve a list of the currently running Resque processes.</p>
<p><script src="https://gist.github.com/5d10d4e558484d9a7be6.js?file=procs.sh"></script></p>
<p>What we want to do is send the <strong>SIGUSR1</strong> signal to the parent process. This will tell the process to immediately kill the child process and continue working other jobs. You can get a list of which signals the processes respond to and what they do at <a href="https://github.com/defunkt/resque/#signals">https://github.com/defunkt/resque/#signals</a>.</p>
<p>To figure out which process is the parent process look for the one that says &#8220;Forked N at T&#8221; where N is the process number of the child that is currently proccessing the stuck job.</p>
<p>Not sure which number is <strong>SIGUSR1</strong>? Use `<strong>kill -l</strong>`.</p>
<p><script src="https://gist.github.com/aecb898f3dac1d8f0423.js"></script></p>
<p>So we see that <strong>30</strong> is <strong>SIGUSR1</strong>. Finally, send that to the parent process.</p>
<p><script src="https://gist.github.com/d67829bf4e9329c5006d.js"></script></p>
<p>This will kill the child process immediately and allow the worker to get back to work.</p>
<p>All of this information is in the Resque README, but it still took me some time to figure it out. So I thought I would just write a quick post on how we&#8217;re handling this.</p>
<p>If you&#8217;ve seen similar issues with stuck long running jobs and have been able to prevent them, please let us know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Android Unit-Tests With Robolectric]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/writing-android-unit-tests-with-robolectric/index.html"/>
    <updated>2012-04-23T00:00:00-07:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/writing-android-unit-tests-with-robolectric/writing-android-unit-tests-with-robolectric</id>
    <content type="html"><![CDATA[<p>Until recently, I&rsquo;ve been unable to configure a <a href="http://pivotal.github.com/robolectric/" title="Robolectric" target="_self">Robolectric</a> project that can easily be shared across a team and integrated with <a href="http://jenkins-ci.org/" title="Jenkins CI" target="_self">Jenkins CI</a> without the use of Maven. I mentioned this in a previous post, and have asked for assistance on Pivotal&rsquo;s <a href="http://groups.google.com/group/robolectric?pli=1" title="Robolectric Google Group" target="_self">Robolectric Google Group</a> a handful of times. There are several jar files that need to be referenced, and dependencies between the test and main Android projects and (without the use of Maven) this is difficult to configure and move around between teammates.</p>
<p>Read on at <a href="http://publicstaticdroidmain.com/2012/03/robolectric-ant-project-eclipse/" title="Android Development Blog" target="_self">Public Static Droid Main</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Credit Cards In HotelTonight For iPad]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/working-with-credit-cards-in-hoteltonight-for/index.html"/>
    <updated>2012-04-03T00:00:00-07:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/working-with-credit-cards-in-hoteltonight-for/working-with-credit-cards-in-hoteltonight-for</id>
    <content type="html"><![CDATA[<p>If you haven&rsquo;t heard, we <a href="http://itunes.apple.com/us/app/hotel-tonight-last-minute/id407690035?mt=8">released an iPad app</a>. It&rsquo;s pretty good too. We were confronted with quite a few interesting and unique challenges in bringing our iPhone app to the much larger screen of the iPad. Just blowing everything up so that the existing phone app used the entirety of the iPad&rsquo;s screen wasn&rsquo;t good enough. We needed to start with a blank slate and rebuild everything from scratch to make a true iPad experience that we could be proud of.</p>

<p>One area that received quite a bit of attention was the interface for entering and selecting a credit card to use during a booking. Since we sell a physical good (a hotel room reservation), we don&rsquo;t use the in-app purchase frameworks that Apple provides for allowing upgrades and other purchases in the other apps you love.</p>

<p>The problem with credit card input is that no one enjoys doing it. It&rsquo;s a utilitarian chore entering a string of numbers, an expiration date and a CVV whether you&rsquo;re on the desktop or mobile. Our primary goal with creating this new card entry experience was to make it not only easy to use, but also fun.</p>

<p>For comparisons sake, this is what we started with on the iPhone:</p>

<p><img src="http://getfile0.posterous.com/getfile/files.posterous.com/temp-2012-04-03/xGawDAvBDvsJtshiyatAHecrDBByEEoomozeyAnkknelEycjgmlfovgtvAqh/iphone_cards.png" alt="iPhone Card Entry" /></p>

<p>Certainly a serviceable UI, but not something that we wanted to just import into the iPad UI. For one, having a full size table view in the middle of our booking workflow would look strangely out of place. Second, we tried really hard to minimize the number of popovers in the interface. Popovers are useful for supplemental information, but providing them as part of the main workflow in the app wouldn&rsquo;t be a fit for the experience we were trying to provide our users.</p>

<h2>Research/Inspiration</h2>

<p>Before we went down the path of building our own card implementation, we spent some time downloading different mobile apps and seeing how they did credit card entry. The first place to look of course is at our friends at <a href="http://squareup.com">Square</a>. A company built around taking mobile payments is an easy place to look. We also were incredibly impressed by our same day booking buddies at <a href="https://www.getwillcall.com/">WillCall</a>. Their entire app is impressive, but their card entry UI is what caught our eye the most.</p>

<p>What both Square and WillCall have in common is the single-line entry paradigm. Once you enter a credit card number, your cursor automatically shifts to the next field, followed by the next until you&rsquo;re ready to submit. There is inline validation along the way to ensure the user isn&rsquo;t hitting the authentication servers with obviously bad data such as an expired card or an invalid card number.</p>

<h2>What We Ended Up With</h2>

<p>For the first version of HotelTonight for iPad, this is what we shipped:</p>

<p><img src="http://getfile9.posterous.com/getfile/files.posterous.com/temp-2012-04-03/avozleyDqeElcedGGsahpcEbfvFpvggDnpjkEAdwGGqIEJpeweIjnqtGIDDa/card1.png" alt="Card Entry State" /></p>

<p>There are three states to our card selection user interface:</p>

<ol>
<li>The card entry state (above)</li>
<li>The card validation state (below)</li>
<li>The card selection state (the screenshot below that).</li>
</ol>


<p>The card entry state has two fields: the card number and card expiration. The card number field is just a vanilla <code>UITextField</code>, but we do a bit of massaging of the input as the user types. Most noteably, we have a <code>UITextFieldTextDidChangeNotification</code> handler attached that does three things:</p>

<ol>
<li>Ensure that we have a valid length card number</li>
<li>Ensure that the card number matches the type of cards we support: Visa, MasterCard, American Express and Discover.</li>
<li>Ensure the card passes a <a href="http://en.wikipedia.org/wiki/Luhn_algorithm">luhn validation</a></li>
</ol>


<p>If the card number is validated, we automatically transition the user to the expiration date field so they can continue typing. No need to tap a next button or manually tap on the expiration field. Upon entering a successful expiration date, we transition to the  validation state.</p>

<p><img src="http://getfile4.posterous.com/getfile/files.posterous.com/temp-2012-04-03/CDtAFgCwzpGjHudBsCpmwErjAcaAhgonFxpuvsfepidhxIxafaJJGwDgmsJD/card2.png" alt="Card Validation State" /></p>

<p>The validation state transition is where we highlight what type of card the user has entered as well as providing the last four digits of their card number. Tapping on either of those transitions back to the card entry state. The user can also backspace from the CVV field to get back there. More on that later.</p>

<p>Once a card is entered, it shows in in our credit card tray.</p>

<p><img src="http://getfile9.posterous.com/getfile/files.posterous.com/temp-2012-04-03/BGydlczksqviHpqIvpnJDFrgztHtyAjFHoeAaxvvtJqAbbfqHejDsCFyhrjj/card3.png" alt="Card Selection State" /></p>

<p>The currently selected card has a full-color treatment while the others are desaturated. If you have more than a few cards, the picker turns into a scrollable control that lets you choose between the different ones.</p>

<h2>The Little Details</h2>

<p>We obsess over the little details at HT. The first time we played with a functional implementation of the card picker control, we were annoyed that deleting the last character in a text field didn&rsquo;t push back to the previous text field or picker state. It turns out this isn&rsquo;t as easy as we had hoped.</p>

<p>Whenever you make a change to a <code>UITextField</code>, you have the opportunity to perform an action using the <code>- textField:shouldChangeCharactersInRange:replacementString:</code> delegate method. Unfortunately it is not called if there are no characters in a text field. To work around this, we decided to insert a zero width space (\u200B for the Unicode fans in the house) at the beginning of each text field. <code>UITextField</code> won&rsquo;t render the space, but it is capable of being deleted, and subsequently firing our delegate method. We then check if the delete key is being pressed while the text field only contains that zero width space. If it is, we transition to the previous field.</p>

<h2>Things We Waffled Over</h2>

<p>In the run-up to shipping our shiny new iPad app, we gave everyone in the office an opportunity to test out the application. Tests like this are always eye opening because developer eyes tend to glaze over after staring at the same piece of functionality for days and weeks on end. We miss stuff, or assume other things are more obvious than they really are.</p>

<p>The first thing our user tests uncovered was that people didn&rsquo;t know what to do with the card picker in its default selection state if they didn&rsquo;t have any cards already associated with their account. To alleviate this, we default to showing the picker to the user in its card entry state if there are no credit cards associated with the currently logged in user.</p>

<p>We also decided to add a bit of help text underneath each the entry fields to further guide the user along. Each text field has placeholder text, but in the case of fields like CVV we were concerned some users might not know what a CVV was. The help text offers a bit of guidance.</p>

<h2>Moving Forward</h2>

<p>As with all things software, we have a few ideas of how we want to enhance the card picker going forward. For one, users can&rsquo;t currently edit or delete cards. There are also some additional treatments and animations we&rsquo;d like to add to the card tray as you transition from the selection state into the new card input.</p>

<p>You can check out the  card picker in action by downloading our new iPad app <a href="itunes">on the App Store</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Apps Permissions - What to Do?]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/101696463/index.html"/>
    <updated>2012-02-13T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/101696463/101696463</id>
    <content type="html"><![CDATA[<p>In the wake of the Path address book debacle, Justin Williams, the newest member of our iOS team, has a <a href="http://carpeaqua.com/2012/02/11/cancel-or-allow-overload/" target="_blank">great&nbsp;</a><span style="font-family: Lucida Grande, arial, sans-serif; font-size: 12px; line-height: 20px;"><a href="http://carpeaqua.com/2012/02/11/cancel-or-allow-overload/" target="_blank">post</a> expounding on how Apple currently handles access permissions with modal dialogs,</span><span style="font-family: Lucida Grande, arial, sans-serif; font-size: 12px; line-height: 20px;">&nbsp;</span><span style="font-family: Lucida Grande, arial, sans-serif; font-size: 12px; line-height: 20px;">how that compares to other platforms and how he thinks they could solve the problem going forward. The post was <a href="http://daringfireball.net/linked/2012/02/13/cancel-or-allow" target="_blank">fireballed</a> today.</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking If Rake Was Called With Verbose Or Trace]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/checking-if-rake-was-called-with-verbose-or-t/index.html"/>
    <updated>2012-01-24T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/checking-if-rake-was-called-with-verbose-or-t/checking-if-rake-was-called-with-verbose-or-t</id>
    <content type="html"><![CDATA[<p>Recently we needed to check whether a rake task was called with the &#8211;verbose or &#8211;trace flags.</p>
<p>For verbose you can do the following inside your rake task:</p>
<p>
<script src="https://gist.github.com/1670723.js?file=verbose.rb"></script>
</p>
<p>Pretty simple, right? Be careful though, the default value for verbose is the symbol :default so using it in a predicate like `if verbose` will allow it to pass through. You will need to explicitly compare it to true.</p>
<p>Checking if your rake task was called with &#8211;trace is a bit more, well, verbose. Here is how you would do that:</p>
<p>
<script src="https://gist.github.com/1670723.js?file=trace.rb"></script>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving Accessibility Support In HotelTonight For iOS ]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/improving-accessibility-support-in-hoteltonig/index.html"/>
    <updated>2012-01-12T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/improving-accessibility-support-in-hoteltonig/improving-accessibility-support-in-hoteltonig</id>
    <content type="html"><![CDATA[<p>I recently joined the HotelTonight development team to help improve and further our existing iOS app as well as building some even cooler stuff down the road. One of the first things I wanted to tackle was ensuring that our iOS app offers proper accessibility support for users that take advantage of Apple&rsquo;s excellent <a href="http://www.apple.com/accessibility/voiceover/">VoiceOver technology</a>.</p>
<p>VoiceOver is amazing because it enables vision-impaired users to use a device that has just a single physical button like the iPhone or iPad almost as easily as someone with full use of their sight. Tapping a button or label reads aloud just enough information for the user to perform the action intended.</p>
<p>Beyond the noble reasons for improving the accessibility of the HotelTonight iOS app, it will also help us as we start adopting automated testing and continuous integration as part of our build workflow. We&rsquo;re still evaluating what solution we will adopt, but each one we&rsquo;ve analyzed makes extensive use of Apple&rsquo;s accessibility APIs to reference parts of your interface. Bonus!</p>
<p>Apple gives you a lot for free if you use the standard widgets that are included with the UIKit frameworks. If you stray from the standard widgets and build your own controls, they also make it relatively simple to adopt their <code>UIAccessibility</code> informal protocol.</p>
<h2>Accessibility Testing and the Almighty Triple-Tap Shortcut</h2>
<p>Before you can actually begin working on improving the accessibility of your app, you need to see where it stands in its current incarnation. The easiest way to do this is by enabling VoiceOver on your own device, running through each screen and seeing what works and what needs to be fixed.</p>
<p>If you are going to be working frequently with VoiceOver (and you will be if you plan to do this), you can quickly enable or disable it via a triple-tap of the Home button. Triple-tapping is not enabled by default, but you can turn this feature on by performing the following steps on your device:</p>
<ol>
<li>Launch the Settings app.</li>
<li>Tap on General.</li>
<li>Tap on Accessibility.</li>
<li>Scroll down to the bottom and set &ldquo;Triple-click Home&rdquo; to &ldquo;Toggle VoiceOver&rdquo;.</li>
</ol>
<p>[[posterous-content:jfkabihdoyzGhwkedEJo]]</p>
<p>The iOS simulator also has an Accessibility Inspector you can enable that will show you traits, labels and other attributes related to accessibility. I used it a few times, but generally found it easier to do all the testing on a device with VoiceOver enabled. Just make sure you&rsquo;ve got a set of headphones or your co-workers may try to smash your iPhone to silence the repeated quips of the sweet VoiceOver lady.</p>
<h2>Table Cell Improvements</h2>
<p>Our accessibility testing showed that the existing version of HotelTonight for iOS had a good head start thanks to how much free stuff Apple gives in terms of VoiceOver support in the frameworks. Our tab bar items each had labels that were properly read aloud. Our hotel and booking table cells each read out most of the relevant information to the user as they were browsing through the app.</p>
<p>[[posterous-content:sHHBljfwktsbwCyufnGa]]</p>
<p>In the case of our hotel cells, I wanted to make sure that all of the information that a non-VoiceOver user could see was accessible to anyone. In our case, that meant reading aloud which category the hotel was rather than just displaying an image. I also wanted to make sure that the accessibility label had a good delivery to it rather than being several short, robotic sounding sentences. When you tap on one our the hotel cells, it now reads something along the lines of:</p>
<blockquote class="posterous_short_quote">
<p>Hotel Rex, a charming hotel. $69 dollars. Regularly $109 dollars. Available for one night. 2 Rooms Left.</p>
</blockquote>
<p>Adding this was trivial.</p>
<p>In our UITableViewCell subclass (<code>HTHotelCell</code>) I added two methods that are part of the <code>UIAccessibility</code> informal protocol: <code>isAccessibilityElement</code> and <code>accessibilityLabel</code>. The <code>isAccessibilityElement</code> method just returns YES to let VoiceOver know that our table cell is indeed something that should be supported. The <code>accessibilityLabel</code> is where we define what is spoken by the lovely VoiceOver lady. We adjust that output based on room availability, how many nights are available to book and whether the hotel has sold out for the evening.</p>
<h2>Detail Tab Improvements</h2>
<p>When a user taps on a specific hotel to check out the details of it, we have a segmented control along the top with separate segments for &ldquo;Book&rdquo;, &ldquo;Info&rdquo; and &ldquo;Map&rdquo;. We use the open source <code>SSSegmentedControl</code> to build our stylized view and what I discovered was that it was completely inaccessible to anyone using VoiceOver.</p>
<p>[[posterous-content:HrnFzuJxmBiDBrqoIjEk]]</p>
<p>With a standard segmented control such as the one in the YouTube app&rsquo;s &ldquo;Most Viewed&rdquo; tab, each segment is individually tappable and will have its label read aloud. Unfortunately for us, our custom control didn&rsquo;t allow any sort selection under VoiceOver. This meant our VoiceOver users could only work within the &ldquo;Book&rdquo; tab and would never be able to see our additional information about the hotel or view it on a map from within the app.</p>
<p>Apple has a second informal protocol called <code>UIAccessibilityContainer</code> to handle situations like this. <code>UIAccessibilityContainer</code> allows developers to group separate <code>UIAccessibilityElements</code> that are part of a single visual control, but have different selectable parts. The <code>UIAccessibilityContainer</code> protocol has three required methods to implement:</p>
<ol>
<li><code>accessibilityElementCount</code> returns the number of <code>UIAccessibilityElements</code>.</li>
<li><code>accessibilityElementAtIndex:</code> returns a specific instance of  <code>UIAccessibilityElement</code>.</li>
<li><code>indexOfAccessibilityElement:</code> returns an NSInteger related to a specific <code>UIAccessibilityElement</code>.</li>
</ol>
<p>As part of <code>UIAccessibilityContainer</code> you are also required to set the <code>isAccessibilityElement</code> method we discussed earlier to NO. Since each individual element will be selectable, the parent control shouldn&rsquo;t be otherwise the others wouldn&rsquo;t be tappable.</p>
<p>To get the tabs selectable in VoiceOver, we sprinkled a few extra lines of code into the <code>drawRect:</code> method of <code>SSSegmentedControl</code>. This snippet creates the <code>UIAccessibilityElement</code> for each tab and adds it to a separate <code>accessibleElements</code> array that we then work with in the protocol methods from above.</p>
<p><script src="https://gist.github.com/1586076.js"></script></p>
<p>You can see our fork of SSToolkit with the accessibility improvements on our <a href="https://github.com/hoteltonight/sstoolkit">Github profile</a>.</p>
<h2>Night Selector Improvements</h2>
<p>Another piece of our hotel detail view controller needed a bit of improvement in VoiceOver: our <code>HTNightSelectorView</code> control. When deciding to book a specific hotel, we have a custom control that will slide up with the number of nights you are able to book (usually between 1 and 5 nights). Each of those options are rendered as a separate instance of a <code>UIView</code> subclass called <code>HTNightsRow</code>.</p>
<p>[[posterous-content:GaukloerjAthfoximusm]]</p>
<p>The previous version of the HotelTonight app would allow a VoiceOver user expose the custom night selection UI, but they couldn&rsquo;t actually change the number during the booking experience. Instead the number of nights and the price were shown as separate labels that were read aloud.</p>
<p>To workaround this we set each instance of <code>HTNightsRow</code> to be an accessible element by setting  <code>isAccessibilityElement</code> to YES and adjusting the <code>accessibilityLabel</code> to output the number of nights and the price as a single string. In situtations where a specific number of nights were unavailable, non-VoiceOver users are shown &ldquo;N/A&rdquo; rather than a price. VoiceOver reads that as &ldquo;N Slash A&rdquo;  <code>accessibilityLabel</code> will instead read that out as &ldquo;not available&rdquo;.</p>
<p>We also adjusted each <code>HTNightsRow</code> instance to have a custom set of <code>UIAccessibilityTraits</code>. Traits are what help VoiceOver understand what each specific view or control is capable of doing. Apple offers a variety of different traits you can apply to your controls. By default we wanted to treat each <code>HTNightsRow</code> row as a tappable button that contains static text and allows manipulation by the user.</p>
<p>If the night option is unavailable, we also set the <code>UIAccessibilityTraitNotEnabled</code> trait. Here&rsquo;s the snippet that does that.</p>
<p><script src="https://gist.github.com/1586083.js"></script></p>
<h2>Useful Links</h2>
<p>These were the links I frequently referenced working on this project.</p>
<ul>
<li><a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/iPhoneAccessibility/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008785-CH1-SW1">Apple&rsquo;s Accessibility Programming Guide for iOS</a></li>
<li><a href="http://mattgemmell.com/2010/12/19/accessibility-for-iphone-and-ipad-apps/">Matt &lsquo;Legend&rsquo; Gemmell&rsquo;s Accessibility Guide</a></li>
<li><a href="http://developer.apple.com/library/ios/documentation/uikit/reference/UIAccessibility_Protocol/">UIAccessibility Protocol Reference</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIAccessibilityContainer_Protocol/Introduction/Introduction.html">UIAccessibilityContainer Protocol Reference</a></li>
<li><a href="http://developer.apple.com/library/ios/documentation/uikit/reference/UIAccessibilityElement_Class/Reference/Reference.html">UIAccessibilityElement Protocol Reference</a></li>
</ul>
<p>In all, getting the HotelTonight iOS app up and properly running with VoiceOver enabled was a two-day project. It wasn&rsquo;t the most difficult problem we have ever tackled, but it could be one of the most rewarding. We want HotelTonight to be usable by anyone with an iPhone and we can happily say that our newest version is.</p>
<p>You can check out our improved VoiceOver support in the upcoming 2.2 release of&nbsp;<a href="http://itunes.apple.com/us/app/hotel-tonight-last-minute/id407690035?mt=8">HotelTonight for iOS</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pure CSS3 Buttons in Mobile WebKit]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/pure-css3-buttons-in-mobile-webkit/index.html"/>
    <updated>2011-12-12T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/pure-css3-buttons-in-mobile-webkit/pure-css3-buttons-in-mobile-webkit</id>
    <content type="html"><![CDATA[<p>[[posterous-content:DbjseIpecepIErpBBjCh]]<p /></p>
<p><span style="font-size: medium;"><strong>Pure CSS3 buttons in Mobile WebKit</strong></span></p>
<p>Recently, we introduced a lower friction pathway from the wilds of the world wide web into our app, HotelTonight. &nbsp;We see a lot of traffic coming on mobile devices and decided to try to put as much of the HotelTonight experience in front of visitors as possible.</p>
<p>In addition to implementing a deal sample screen, which you can see by visiting our <a href="http://hoteltonight.com/" title="Hotel Tonight" target="_blank">homepage</a> with an iPhone, Android or Blackberry device, we have a signup page which allows users to quickly create an account from scratch or by linking up with their facebook profile.</p>
<p>It was important for us to create a seemless transition between the web-based signup and the app. &nbsp;We&#8217;re obscenely proud of our apps, and the faster we can show you why the happier we are. &nbsp;We approached the signup screen as a trailer for the native apps, and to accomplish that we needed to nail the native-looking elements.</p>
<p>&nbsp;</p>
<p><strong>Why pure CSS3?</strong></p>
<p>There are quite a few techniques for emulating native iphone app controls, some incredibly creative, using images in different ways. &nbsp;This approach has a lot of advantages, primary among them being that you can capture all the subtlety employed in the native elements using tools well suited to the task (Photoshop, Fireworks, maybe Pixelmator).</p>
<p>But there are drawbacks as well. &nbsp;Using images in almost any capacity can severely limit your design. &nbsp;Characteristics like color, opacity and dimension can be pegged down when using images.</p>
<p>An image also increases the load time of your page, which is a first-order offense in mobile web development. &nbsp;Yes, it doesn&#8217;t have to increase it by much, but we approached adding a resource to load as a last-resort. &nbsp;The signup page needed to be as fast to load as we could push it, and push it we did.</p>
<p>&nbsp;</p>
<p><strong>Implementation</strong></p>
<p>One key aspect for our implementation of these iphone-style buttons was the semantic structure of our forms. &nbsp;We&#8217;re pretty big into semantic markup, and as it happened that worked out very much in our favor. &nbsp;The following is a snippet that shows how the button is rendered into our form:</p>
<p><script src="https://gist.github.com/1425583.js"></script></p>
<p>&nbsp;</p>
<p>You can see that the list item tag is classed as a &#8220;button&#8221;, which we use to achieve the outset border look of the native button by styling the list item tag *as* the outset border. &nbsp;We probably would have needed an extra[neous] div tag around the button without this.</p>
<p>You can see the effect below, first in the native implementation and then in our HTML5 implementation:</p>
<p>[[posterous-content:GaIvCnIxyrdqFrGErchb]][[posterous-content:ooozrgaFHqrawrlblBvq]]</p>
<p>&nbsp;</p>
<p><strong>CSS</strong></p>
<p>The styling leverages some key features of the CSS3 spec that are generally well supported across WebKit browsers including box shadows (and inset box shadows), linear gradients and text shadows.</p>
<p><script src="https://gist.github.com/1431661.js"></script></p>
<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick iOS App for Comparing All Fonts]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/quick-ios-app-for-checking-out-fonts/index.html"/>
    <updated>2011-12-06T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/quick-ios-app-for-checking-out-fonts/quick-ios-app-for-checking-out-fonts</id>
    <content type="html"><![CDATA[<p>I threw together a quick iOS app for viewing all of the fonts on the device. There are some more featureful apps for looking at each of the device&#8217;s fonts, such as <a href="http://itunes.apple.com/us/app/fonts/id285217489?mt=8" title="Fonts">Fonts</a>, but we didn&#8217;t see any that let us view a custom string in every font, all in one table. But it only took 20 minutes or so to create exactly what we needed. I&#8217;ve shared the source on GitHub at&nbsp;<a href="https://github.com/raylillywhite/FontTest">https://github.com/raylillywhite/FontTest</a>, in case it sounds useful to anyone. As you can see below, it was quick and dirty ;)[[posterous-content:pgJnidDynwqklGcJvdoH]]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A hack/ship git workflow with shared remote branches]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/79320846/index.html"/>
    <updated>2011-11-18T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/79320846/79320846</id>
    <content type="html"><![CDATA[<p>This post describes how we&#8217;ve come to develop some <a href="http://github.com/hoteltonight/git-scripts">git scripts and shortcuts</a> to help manage our development process at Hotel Tonight. All the aliases/functions I use in the examples below are documented there.</p>
<h2>Some History</h2>
<p>When we first started working on Hotel Tonight, we adopted the <a href="http://reinh.com/blog/2008/08/27/hack-and-and-ship.html">hack &amp;&amp; ship</a> workflow to facilitate performing all work on feature-specific branches. As long as we had fewer developers than software projects, that worked great, because it was very unusual for more than one person to work on a feature before it was ready to ship to master.</p>
<p>Somewhat similar to <a href="http://scottchacon.com/2011/08/31/github-flow.html">GitHub&#8217;s workflow</a>, we don&#8217;t have formal releases, and like to keep master always in a deployable state. So that means that when we want to collaborate on a new feature, we do it in a remote branch. And that&#8217;s where things become tricky.</p>
<h2>The dark side of rebasing</h2>
<p>The original hack script pulls in other people&#8217;s changes <em>from master</em>, by rebasing your branch onto master each time. This presents two problems if you&#8217;re working on a shared remote branch with others &#8211; first, it&#8217;s not what you&#8217;re most interested in. That is, while you&#8217;d like to keep up with changes on master, what you <em>really</em> want is to keep up with other people&#8217;s changes on your branch.</p>
<p>Second, and this is what really bit us, if you rebase commits you&#8217;ve already shared with others onto master, you&#8217;re in effect rewriting history, and chaos ensues. Witness:</p>
<p>I create a new branch and start working on some feature&#8211;</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[chris example (master)]$ gcb disco_ball
 Switched to a new branch 'disco_ball'

[chris example (disco_ball)]$ vi ball.rb

[chris example (disco_ball %)]$ gac
[disco_ball 73c2c53] Some initial thoughts on implementing the ball
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 ball.rb

[chris example (disco_ball)]$ git push origin disco_ball
 To /home/chris/example      * [new branch]      disco_ball -&gt; disco_ball</pre></div>
</div>

</blockquote>
<p>Now my coworker checks it out, enters some of his ideas&#8211;</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[patrick example (master)]$ git checkout -t origin/disco_ball
 Branch disco_ball set up to track remote branch disco_ball from origin.
 Switched to a new branch 'disco_ball'

[patrick example (disco_ball)]$ vi ball.rb

[patrick example (disco_ball *)]$ gac
 [disco_ball 819d41c] Some alternate disco-ball strategies
 1 files changed, 1 insertions(+), 1 deletions(-)</pre></div>
</div>

</blockquote>
<p>Meanwhile, say there have been some changes on master, and I want to pull those in, and then do some more work on the ball, then share that. Our old hack would do a rebase onto master..</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[chris example (disco_ball)]$ git rebase master
 First, rewinding head to replay your work on top of it...
 Applying: Some initial thoughts on implementing the ball

[chris example (disco_ball)]$ vi ball.rb

[chris example (disco_ball *)]$ gac
 [disco_ball a76373e] Lighting-related work
 1 files changed, 1 insertions(+), 0 deletions(-)

[chris example (disco_ball)]$ git push
 To /home/chris/example
   0ae267e..3fc53df  master -&gt; master
 ! [rejected]        disco_ball -&gt; disco_ball (non-fast-forward)
 error: failed to push some refs to '/home/chris/example'
 To prevent you from losing history, non-fast-forward updates were rejected
 Merge the remote changes before pushing again.  See the 'Note about
 fast-forwards' section of 'git push --help' for details.</pre></div>
</div>

</blockquote>
<p>And here&#8217;s where things break down. My history doesn&#8217;t match up with the remote history anymore (3fc53df is from master):</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[chris example (disco_ball)]$ gl
 a76373e Lighting-related work
 06bd2d1 Some initial thoughts on implementing the ball
 3fc53df An important component to keep the people upstairs away from us
 0ae267e Create example repo

[chris example (disco_ball)]$ gl origin/disco_ball
 73c2c53 Some initial thoughts on implementing the ball
 0ae267e Create example repo</pre></div>
</div>

</blockquote>
<p>Git suggests merging the remote changes, but that isn&#8217;t pretty&#8211;</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[chris example (disco_ball)]$ git pull origin disco_ball
 From /home/chris/example
  * branch            disco_ball -&gt; FETCH_HEAD
 Auto-merging ball.rb
 CONFLICT (add/add): Merge conflict in ball.rb
 Automatic merge failed; fix conflicts and then commit the result.

[chris example (disco_ball *+|MERGING)]$ cat ball.rb
# There should be a whole ton of little mirrors on it!
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
# Also, important that we shine light at it.
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 73c2c5395095d5f0502db8d397d80f3aa029f1ec</pre></div>
</div>

</blockquote>
<p>Alternately, we could force push, but then look what happens when Patrick tries to update:</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[patrick example (disco_ball)]$ git pull
 From /home/chris/example
  + 73c2c53...a76373e disco_ball -&gt; origin/disco_ball  (forced update)
 Auto-merging ball.rb
 CONFLICT (add/add): Merge conflict in ball.rb
 Automatic merge failed; fix conflicts and then commit the result.

[patrick example (disco_ball *+|MERGING)]$ cat ball.rb
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
# What if it's just one big shiny sphere?
=======
# There should be a whole ton of little mirrors on it!
# Also, important that we shine light at it.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; a76373ed377efdc65849e887e8694eeca0e23730</pre></div>
</div>

</blockquote>
<p>What a mess! So, clearly, this doesn&#8217;t work. And, if you start squashing stuff, which we like to do sometimes, so that we don&#8217;t have to spam github with all our intermediate work, the history-rewriting merge-conflict-creating situation becomes even uglier.</p>
<h2>A kinder, gentler way to share</h2>
<p>In order to control this potential for chaos, we needed a better strategy for how branches are shared. This is the procedure I came up with:</p>
<ol>
<li>When you &#8216;hack&#8217; on a shared branch, you rebase your local changes <em>onto the remote branch</em>, not onto master. New commits from master are <em>not</em> pulled in during hack.</li>
<li>When you &#8216;share&#8217; your changes to an existing shared branch, first do an interactive rebase onto the remote, so you can squash, then <em>merge</em> in anything new from master, right before pushing. This is the only safe time to merge in from master, because you don&#8217;t want to squash changes from master in amongst your local changes.</li>
<li>When you &#8216;ship&#8217; to master, do an interactive rebase onto master, to do a big squash of all the branch work &#8211; and at that point, the remote branch is considered deprecated and should be removed, since its history no longer matches.</li>
</ol>
<p>Here&#8217;s what that process looks like, starting over with a new disco ball branch:</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[chris example (master)]$ gcb disco_ball
 Switched to a new branch 'disco_ball'

[chris example (disco_ball)]$ vi ball.rb

[chris example (disco_ball %)]$ gac
 [disco_ball 77f1fa3] Some initial thoughts on implementing the ball
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 ball.rb

[chris example (disco_ball)]$ share
 Successfully rebased and updated refs/heads/disco_ball.
 To /home/chris/example
  * [new branch]      disco_ball -&gt; disco_ball</pre></div>
</div>

</blockquote>
<p>OK, so &#8216;share&#8217; at this stage basically just created a new remote branch for us. Now Patrick wants to check that out; we&#8217;ll give him a shortcut to see what&#8217;s available and &#8216;borrow&#8217; it:</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[patrick example (master)]$ borrow
 Already on 'master'
 Already up-to-date.
   disco_ball
   master

[patrick example (master)]$ borrow disco_ball
 Branch disco_ball set up to track remote branch disco_ball from origin.
 Switched to a new branch 'disco_ball'</pre></div>
</div>

</blockquote>
<p>Now let&#8217;s say Patrick makes a few changes, and wants to share them with me.</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[patrick example (disco_ball)]$ vi ball.rb

[patrick example (disco_ball *)]$ gac
 [disco_ball 840074c] Another thought on the disco ball
  1 files changed, 1 insertions(+), 0 deletions(-)

[patrick example (disco_ball)]$ vi ball.rb

[patrick example (disco_ball *)]$ gac
 [disco_ball bb06e68] No, wait, that was stupid, this instead.
  1 files changed, 1 insertions(+), 1 deletions(-)

[patrick example (disco_ball)]$ share -notest</pre></div>
</div>

</blockquote>
<p>At that point he&#8217;ll have a chance to squash:</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>pick 021e621 Another thought on the disco ball
pick f3b8218 No, wait, that was stupid, this instead.

# Rebase 77f1fa3..f3b8218 onto 77f1fa3
...</pre></div>
</div>

</blockquote>
<p>The initial commit on the branch, which already exists in the remote, isn&#8217;t listed here; that wouldn&#8217;t be safe to squash.</p>
<p>When the rebase is done the share will merge in the latest from master, and push to the remote. Note the &#8216;-notest&#8217; parameter; normally &#8216;share&#8217; would notice that there was new stuff from master merged in, and run tests before pushing to make sure they hadn&#8217;t broken anything &#8211; since there aren&#8217;t any tests set up for this example repo, we&#8217;ll just skip that. In practice, you&#8217;ll likely need to modify the &#8216;runtests&#8217; script to actually run your project&#8217;s tests correctly.</p>
<p>When I next &#8216;hack&#8217;, I&#8217;ll get both Patrick&#8217;s changes, and the latest from master that was merged in when he shared:</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[chris example (disco_ball)]$ hack
 From /home/chris/example
  * branch            disco_ball -&gt; FETCH_HEAD
 Updating 77f1fa3..0bf7d4c     Fast-forward
  ball.rb    |    1 +
  ceiling.rb |    1 +
 2 files changed, 2 insertions(+), 0 deletions(-)
  create mode 100644 ceiling.rb
 Current branch disco_ball is up to date.</pre></div>
</div>

</blockquote>
<h2>Ship It</h2>
<p>So now if I&#8217;m ready to release the feature to master, I can just &#8216;ship&#8217; normally. I&#8217;ll get a chance to squash everything on the branch:</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>pick 77f1fa3 Some initial thoughts on implementing the ball
pick dd47d48 Another thought on the disco ball

# Rebase a6ed99a..0bf7d4c onto a6ed99a
...</pre></div>
</div>

</blockquote>
<p>And then it&#8217;s merged into master, and I&#8217;m warned to get rid of the remote. The &#8216;gbdone&#8217; script will remove the shipped local and remote branches.</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[chris example (disco_ball)]$ ship
 From /home/chris/example
  * branch            disco_ball -&gt; FETCH_HEAD
 Already up-to-date.
 Current branch disco_ball is up to date.
 [detached HEAD 00db9d0] A basic disco ball
  1 files changed, 2 insertions(+), 0 deletions(-)
  create mode 100644 ball.rb
 Successfully rebased and updated refs/heads/disco_ball.
 Switched to branch 'master'
 Updating a6ed99a..00db9d0     Fast-forward
  ball.rb |    2 ++
  1 files changed, 2 insertions(+), 0 deletions(-)
  create mode 100644 ball.rb
 To /home/chris/example
    a6ed99a..00db9d0  master -&gt; master
 Switched to branch 'disco_ball'
 IMPORTANT: Please remember that your local branch has a conflicting
 history with its remote now, due to rebase onto master. Don't let anyone
 keep working on the remote; it needs to be blown away via either outright
 removal or forced push.

[chris example (disco_ball)]$ gbdone
 Switched to branch 'master'
 Deleted branch disco_ball (was 00db9d0).
 To /home/chris/example
  - [deleted]         disco_ball</pre></div>
</div>

</blockquote>
<h2>A slightly more cautious way to ship</h2>
<p>Alternately, you may want to do a code review and/or some extra testing, after rebasing onto master and squashing your changes, but before shipping. So we added a convenience method to &#8216;pack&#8217; your code into another branch before release. Then you can &#8216;share&#8217; that for code review, or just play with it locally, and ship it normally when you&#8217;re done.</p>
<blockquote>
<div class="CodeRay">
  <div class="code"><pre>[patrick example (disco_ball)]$ pack
 Switched to a new branch 'disco_ball_release'
 [detached HEAD f77edf3] A basic disco ball
  1 files changed, 2 insertions(+), 0 deletions(-)
  create mode 100644 ball.rb
 Successfully rebased and updated refs/heads/disco_ball_release.

[patrick example (disco_ball_release)]$ gl
 f77edf3 A basic disco ball
 a6ed99a An important component to keep the people upstairs away from us
 0ae267e Create example repo</pre></div>
</div>

</blockquote>
<h2>In summary</h2>
<p>I guess that all sounds a bit complicated. But once you get into the routine, it&#8217;s pretty frictionless. When you&#8217;re not sharing a branch, hack and ship still work the same as before. When you are, all you need to do most of the time is &#8216;share&#8217; periodically to keep everybody in sync, or &#8216;hack&#8217; occasionally if you want to pull in a coworker&#8217;s changes before yours are ready to share.</p>
<p>There are still a few edge cases, mostly around what happens when there are legit conflicts &#8211; some of those the scripts will detect and help you out with, others we might still need to work on. Again, all of it&#8217;s available here:</p>
<p><a href="http://github.com/hoteltonight/git-scripts">http://github.com/hoteltonight/git-scripts</a></p>
<p>Let us know what you think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails and Mobile and Hotels Oh My!]]></title>
    <link href="http://raylillywhite.github.com/raylillywhitehtblog/rails-and-mobile-and-bookings-oh-my/index.html"/>
    <updated>2011-11-17T00:00:00-08:00</updated>
    <id>http://raylillywhite.github.com/raylillywhitehtblog/rails-and-mobile-and-bookings-oh-my/rails-and-mobile-and-bookings-oh-my</id>
    <content type="html"><![CDATA[<p class="p1">Welcome to the HotelTonight engineering blog. We&#8217;ve spent the last year creating an <a href="http://itunes.apple.com/us/app/hotel-tonight-last-minute/id407690035?mt=8" title="HotelTonight iPhone app" target="_blank">awesome mobile app</a> and an extensive back end to power our apps and support our hotel partners. Along the way we&#8217;ve employed and built some very interesting technology. The first version of the iPhone app, and corresponding server side components, were developed in about 2.5 months by two developers, with help from a designer, and business folks. During this time we built the first mobile-only online travel agency, and believe the most major innovation in travel since opaque deals. &nbsp;This has&nbsp;<a href="http://www.hoteltonight.com/press" title="HotelTonight's great press" target="_blank">delighted</a> both end users and hotels. We didn&#8217;t stop there.</p>
<p class="p2">HotelTonight has continued to innovate. We just released the <a href="http://www.tnooz.com/2011/11/15/mobile/revenue-managers-go-mobile-with-hoteltonight-extranet" target="_blank">world&#8217;s first mobile extranet for hotels</a>. In addition, we recently rewrote our entire iPhone app to get from 4.5 to 5 stars (watch for a future blog entry). We could be biased, but we believe it is the best travel app in the App Store. We have several cool projects in the works right now that we&#8217;ll share here as they get released. We use a lot of open source, are working on releasing some of our own, and contributing back changes (some of which are available now in <a href="https://github.com/hoteltonight" title="HotelTonight on GitHub" target="_blank">our GitHub</a> forks). &nbsp;</p>
<p class="p2">In the near future on this blog, some of the topics we&#8217;re planning to cover include:</p>
<ul>
<li>Our Git workflow and scripts</li>
<li>How we leverage &#8220;virtual credit cards&#8221;</li>
<li>Cool code and techniques used in our iOS app</li>
<li>Some fun CSS tricks</li>
<li>CoffeeScript, Haml, and templating</li>
<li>Interesting details on the code that actually books a room</li>
</ul>
<p class="p2">Stay tuned for our first real blog entry. And, please tell us what you&#8217;d like to know about HotelTonight engineering and technology.</p>
]]></content>
  </entry>
  
</feed>
